var fs = require("fs");
var JSON = require("../package.json");
var beauty = require("js-beautify").js_beautify;
var compiler = require("./compiler");
var path = require("path");

var run_cmd = function(cmd, args, callBack) {
	var spawn = require('child_process').spawn;
	var child = spawn(cmd, args);
	var resp = "";

	child.stdout.on('data', function(buffer) {
		resp += buffer.toString()
	});

	child.stdout.on('end', function() {
		callBack(resp)
	});
};

String.prototype.endsWith = function(suffix) {
	return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

var main = function() {
	var options = {
		execute: false,
		compile: true,
		std: true,
		help: false,
		version: false,
		strict: false
	};

	var args = [];

	for (arg in process.argv.slice(2)) {
		if (process.argv.slice(2)[arg] == "-v" || process.argv.slice(2)[arg] == "--version") {
			options.version = true;
		} else if (process.argv.slice(2)[arg] == "-e" || process.argv.slice(2)[arg] == "--version") {
			options.execute = true;
		} else if (process.argv.slice(2)[arg] == "-h" || process.argv.slice(2)[arg] == "--help") {
			options.help = true;
		} else if (process.argv.slice(2)[arg] == "-ns" || process.argv.slice(2)[arg] == "--no-std") {
			options.std = false;
		} else if (process.argv.slice(2)[arg] == "-s" || process.argv.slice(2)[arg] == "--strict") {
			options.strict = true;
		}

		if (process.argv.slice(2)[arg][0] != '-') {
			args.push(process.argv.slice(2)[arg]);
		}
	}

	if (options.version) {
		console.log("Stripes v" + JSON.version);
	}

	if (options.help) {
		console.log("Stripes v" + JSON.version);
		console.log("\n	$ stripes [args] <file>");
		console.log("\nArguments:");
		console.log("\n	-v, --version		Shows version");
		console.log("	-h, --help		Shows help");
		console.log("	-e, --execute		Executes compiled file");
		console.log("	-s, --strict		Enables strict mode");
		console.log("	-ns, --no-std		Disables standard library");
		console.log("\nExample:");
		console.log("\n	$ stripes -e test.stps");
	}

	var code = "";
	var prelude = fs.readFileSync(path.dirname(__dirname) + '/lib/prelude.stps',
		'utf8');

	if (args[0] == undefined) {
		throw "No file specified as first argument.";
	}

	var loc = process.cwd() + "/" + args[0];

	if (options.std) {
		code += prelude;
	}

	code += fs.readFileSync(loc);

	var target = loc;

	if (target.endsWith(".stps")) {
		target = target.replace(".stps", ".js");
	} else if (target.endsWith(".son")) {
		target = target.replace(".son", ".json");
	} else {
		target += ".js";
	}

	if (typeof args[1] == "string") {
		target = process.cwd() + "/" + args[1];
	}

	var output = "/* Generated by Stripes v" + JSON.version + " */\n" +
		compiler.main(code);

	if (loc.endsWith(".son")) {
		output = compiler.main(code);
	}

	if (options.strict) {
		if (loc.endsWith(".son")) {
			output = "'use strict';\n\n" + compiler.main(code);
		} else {
			output = "/* Generated by Stripes v" + JSON.version + " */\n'use strict';\n\n" +
				compiler.main(code);
		}
	}

	var generated = beauty(
		output, {
			indent_size: 2
		});

	fs.writeFile(target, generated,
		function(err) {
			if (err) {
				console.log(err);
				return;
			} else {
				console.log("[Stripes] " + loc + " -> " + target);
			}
		});

	fs.writeFileSync(target, generated);

	if (options.execute) {
		run_cmd("node", [target], function(text) {
			console.log(text);
		});
	}
};

main();
