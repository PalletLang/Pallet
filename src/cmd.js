var fs = require("fs");
var JSON = require("../package.json");
var beauty = require("js-beautify").js_beautify;
var compiler = require("./compiler");
var path = require("path");

var run_cmd = function(cmd, args, callBack) {
	var spawn = require('child_process').spawn;
	var child = spawn(cmd, args);
	var resp = "";

	child.stdout.on('data', function(buffer) {
		resp += buffer.toString()
	});

	child.stdout.on('end', function() {
		callBack(resp)
	});
};

String.prototype.endsWith = function(suffix) {
	return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

var main = function() {
	var options = {
		execute: false,
		compile: true,
		std: true
	};

	var normalArgs = process.argv.slice(3);

	if (process.argv.slice(2)[0][0] == "-") {
		normalArgs = process.argv.slice(2);
	}

	for (arg in normalArgs) {
		switch (arg) {
			case "-v":
			case "--version":
				console.log("Stripes v" + JSON.version);
				return;
				break;
			case "-e":
			case "--execute":
				options.execute = true;
				break;
			case "-h":
			case "--help":
				console.log("Stripes v" + JSON.version);
				console.log("\n			$ stripes <arg> <file>");
				console.log("\nArguments:");
				console.log("\n			-v, --version");
				console.log("			-h, --help");
				console.log("			-e, --execute");
				console.log("			-c, --compile");
				console.log("\Example:");
				console.log("\n			$ stripes -e test.stps");
				return;
				break;
			case "--no-std":
			case "-ns":
				options.std = false;
				break;
			default:
				throw new Exception("Unknown argument specified.");
		}
	}

	var code = "";
	var prelude = fs.readFileSync(path.dirname(__dirname) + '/lib/prelude.stps',
		'utf8');
	var loc = process.cwd() + "/" + process.argv.slice(2)[0];

	if (options.std) {
		code += prelude;
	}

	code += fs.readFileSync(loc);

	var output = "/* Generated by Stripes v" + JSON.version + " */\n" +
		compiler.main(code);

	var generated = beauty(
		output, {
			indent_size: 2
		});

	var target = loc;

	if (target.endsWith(".stps")) {
		target = target.replace(".stps", ".js");
	} else if (target.endsWith(".son")) {
		target = target.replace(".son", ".json");
	} else {
		target += ".js";
	}

	fs.writeFile(target, generated,
		function(err) {
			if (err) {
				console.log(err);
				return;
			} else {
				console.log("[Stripes] " + target);
			}
		});

	fs.writeFileSync(target, generated);

	if (options.execute) {
		run_cmd("node", [target], function(text) {
			console.log(text);
		});
	}
};

main();
